buildscript {
	ext {
		serenityCoreVersion = '3.1.15'
		serenityCucumberVersion = '3.1.15'
		cucumberVersion = '7.15.0'
		cucumberJunitVersion = '7.15.0'
		junitVersion = '4.13.1'
		restAssuredVersion = '5.4.0'
		springBeansVersion = '5.3.34'
		gatlingVersion = '3.9.2'
		scalaLibraryVersion = '2.13.12'
		lombokVersion = '1.18.30'
        wireMockVersion = '3.10.0'
        wireMockStandaloneVersion = '3.0.1'
	}
	/*
	configurations.all{
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.group == 'org.springframework' && details.requested.name.startsWith('spring-')) {
				details.useVersion "${springBeansVersion}"
				details.because 'Nexus IQ fix'
			}
		}
	}
	*/
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

sourceSets {

}
/*
configurations.all{
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.springframework' && details.requested.name.startsWith('spring-')) {
            details.useVersion "${springBeansVersion}"
            details.because 'Nexus IQ fix'
        }
    }
}
*/

group = 'com.ratnakar.practice'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

configurations {
	all{
		exclude group: 'org.codehaus.groovy', module: 'groovy'
	}
}

dependencies {

	// Spring Boot Dependencies

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.mysql:mysql-connector-j:8.3.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	implementation "org.projectlombok:lombok:${lombokVersion}"
	// Scala
	implementation "org.scala-lang:scala-library:${scalaLibraryVersion}"
	// Wiremock-standalone
	implementation "org.wiremock:wiremock-standalone:${wireMockStandaloneVersion}"

	// Junit and Component testing dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

configurations{
	[apiElements, runtimeElements].each {
		it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar)}
		it.outgoing.artifact(bootJar)
	}
}

jar{
	enabled = false
}

allprojects{
	apply plugin: 'java'
	tasks.withType(Copy).all{
		duplicatesStrategy 'exclude'
	}
}
