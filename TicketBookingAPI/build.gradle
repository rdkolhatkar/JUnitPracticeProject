buildscript {
    ext {
        serenityCoreVersion = '3.1.15'
        serenityCucumberVersion = '3.1.15'
        cucumberVersion = '7.15.0'
        cucumberJunitVersion = '7.15.0'
        junitVersion = '4.13.1'
        restAssuredVersion = '5.4.0'
        springBeansVersion = '5.3.34'
        gatlingVersion = '3.9.2'
        scalaLibraryVersion = '2.13.12'
        lombokVersion = '1.18.30'
        wireMockVersion = '3.10.0'
        wireMockStandaloneVersion = '3.0.1'
    }

    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:${serenityCoreVersion}"
        classpath "com.github.tomakehurst:wiremock-standalone:${wireMockStandaloneVersion}"
    }
    /*
    configurations.all{
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.springframework' && details.requested.name.startsWith('spring-')) {
                details.useVersion "${springBeansVersion}"
                details.because 'Nexus IQ fix'
            }
        }
    }
    */
}

plugins {
    id 'java'
    id 'scala'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'io.gatling.gradle' version "3.9.2"
}

apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'scala'


sourceSets {
    bdd {
        java.srcDir 'src/bdd/java'
        resources.srcDir 'src/bdd/resources'
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    gatling {
        scala.srcDir 'src/gatling/scala'
        resources.srcDir 'src/gatling/resources'
        compileClasspath += configurations.gatling
    }
    wiremock {
        java.srcDir 'src/wiremock/java'
        resources.srcDir 'src/wiremock/resources'
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}
/*
configurations.all{
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.springframework' && details.requested.name.startsWith('spring-')) {
            details.useVersion "${springBeansVersion}"
            details.because 'Nexus IQ fix'
        }
    }
}
*/

configurations {
    bddImplementation.canBeResolved = true
    bddImplementation.extendsFrom testImplementation
    bddRuntime.extendsFrom testRuntime
    wiremockImplementation.extendsFrom implementation
}
group = 'com.ratnakar.practice'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

configurations {
    all {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
}

dependencies {

    // Spring Boot Dependencies

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.mysql:mysql-connector-j:8.3.0'
    compileOnly 'org.projectlombok:lombok'
    // runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    // Scala
    implementation "org.scala-lang:scala-library:${scalaLibraryVersion}"
    // Wiremock-standalone
    implementation "org.wiremock:wiremock-standalone:${wireMockStandaloneVersion}"

    // Junit and Component testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // wiremock
    testImplementation "org.wiremock:wiremock:${wireMockVersion}"


    // Serenity and BDD dependencies
    bddImplementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}"
    bddImplementation "net.serenity-bdd:serenity-reports:${serenityCoreVersion}"
    //bddImplementation "net.serenity-bdd:serenity-cucumber: ${serenityCucumberVersion}"
    bddImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    bddImplementation "io.cucumber:cucumber-junit:${cucumberJunitVersion}"
    bddImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    bddImplementation "org.wiremock:wiremock:${wireMockVersion}"
    bddImplementation "com.github.tomakehurst:wiremock-standalone:${wireMockStandaloneVersion}"


    // Gatling and scala dependencies
    gatling "io.gatling:gatling-core:${gatlingVersion}"
    gatling "io.gatling.highcharts:gatling-charts-highcharts:${gatlingVersion}"
    gatling "org.scala-lang:scala-library:${scalaLibraryVersion}"

}

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

task bddTest(type: Test) {
    finalizedBy('aggregate')
    group = 'verification'
    testClassesDirs = sourceSets.bdd.output.classesDirs
    classpath = sourceSets.bdd.runtimeClasspath
    systemProperties System.properties
    include "**/Runner.class"
}

task perfTest(type: JavaExec) {
    classpath = sourceSets.gatling.runtimeClasspath
    systemProperties System.properties
    classpath = sourceSets.gatling.runtimeClasspath + configurations.gatling
    main = "io.gatling.app.Gatling"
    args = [
            '-s',
            'com.ratnakar.practice.simuation.TicketBooking',
            '-rf',
            "reports"
    ]
}

tasks.register('runWireMock', JavaExec) {
    description = 'Runs the WireMock standalone server'
    classpath = sourceSets.wiremock.runtimeClasspath
    mainClass = 'com.ratnakar.wiremock.runner' // Ensure this is your correct package path
}

jar {
    enabled = false
}

allprojects {
    apply plugin: 'java'
    tasks.withType(Copy).all {
        duplicatesStrategy 'exclude'
    }
}
